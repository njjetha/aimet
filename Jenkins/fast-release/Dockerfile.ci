ARG BASE_IMAGE=ubuntu:22.04
FROM $BASE_IMAGE AS build

ENV CONDA_PREFIX=/opt/conda
ENV CONDA=${CONDA_PREFIX}/bin/conda
ENV CONDA_DEFAULT_ENV=dev

RUN apt update && \
    DEBIAN_FRONTEND=noninteractive apt install --yes --no-install-recommends \
        acl \
        ca-certificates \
        curl \
        # manylinux2014 requires gcc 10 and cuda doesn't support gcc>11
        g++-10 \
        git \
        jq \
        libeigen3-dev \
        libz-dev \
        make \
        pandoc \
        pkg-config \
        sudo \
    && rm -rf /var/lib/apt/lists/* \
    && echo '%users ALL = (ALL) NOPASSWD: ALL' > /etc/sudoers.d/passwordless \
    && curl -o /tmp/conda.sh -L 'https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh' \
    && mkdir -m 777 -p ${CONDA_PREFIX} \
    && setfacl -d -m o::rwx ${CONDA_PREFIX} \
    && bash /tmp/conda.sh -u -b -p ${CONDA_PREFIX} \
    && rm /tmp/conda.sh \
    && ${CONDA} config --set channel_priority strict \
    && ${CONDA} init --no-user --system --all \
    && ${CONDA} install -y conda-devenv \
    && ${CONDA} clean --yes --all --verbose \
    && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10 \
    && git config --system --add safe.directory '*'

ARG VER_PYTHON=3.8
ARG VER_CUDA=11.7.1
ARG VER_TORCH=""
ARG VER_TENSORFLOW=""
ARG VER_ONNXRUNTIME=""

COPY Jenkins/fast-release/environment.devenv.yml /tmp/
RUN export PATH=$PATH:${CONDA_PREFIX}/bin PIP_NO_CACHE_DIR=1 \
    && ${CONDA} devenv \
        --env-var ENV_NAME="${CONDA_DEFAULT_ENV}" \
        --env-var VER_PYTHON="${VER_PYTHON}" \
        --env-var VER_CUDA="${VER_CUDA}" \
        --file /tmp/environment.devenv.yml \
        --output-file /tmp/environment.yml \
    && cat /tmp/environment.yml \
    && ${CONDA} clean --yes --all --verbose \
    && echo "conda activate ${CONDA_DEFAULT_ENV}" >> /etc/profile.d/conda.sh \
    && rm -rf ~/.conda*

RUN echo "\
torch$([ -n "${VER_TORCH}" ] && echo "==${VER_TORCH}")\n\
tensorflow-cpu$([ -n "${VER_TENSORFLOW}" ] && echo "==${VER_TENSORFLOW}")\n\
tensorflow-gpu$([ -n "${VER_TENSORFLOW}" ] && echo "==${VER_TENSORFLOW}")\n\
onnxruntime$([ -n "${VER_ONNXRUNTIME}" ] && echo "==${VER_ONNXRUNTIME}") \
" > /tmp/constraints.txt

RUN --mount=type=bind,target=/workspace \
    echo "Install all required dependencies" \
    && export PIP_NO_CACHE_DIR=1 \
    && export PIP_EXTRA_INDEX_URL="https://download.pytorch.org/whl/$(echo $VER_CUDA | awk -F'.' '{print ($1!="")? "cu"$1$2 : "cpu"}')" \
    && export CMAKE_ARGS="\
        -DENABLE_TENSORFLOW=$([ -z ${VER_TENSORFLOW} ]; echo $?) \
        -DENABLE_TORCH=$([ -z ${VER_TORCH} ]; echo $?) \
        -DENABLE_ONNX=$([ -z ${VER_ONNXRUNTIME} ]; echo $?) \
        -DENABLE_CUDA=$([ -z ${VER_CUDA} ]; echo $?) \
       " \
    && ${CONDA} run --name ${CONDA_DEFAULT_ENV} --live-stream \
        python3 -m piptools compile -vv \
                                    --output-file=/tmp/requirements.txt \
                                    --resolver=backtracking \
                                    --constraint=/tmp/constraints.txt \
                                    --extra=.,dev,test,docs \
                                    /workspace/pyproject.toml \
    && ${CONDA} run --name ${CONDA_DEFAULT_ENV} --live-stream \
        python3 -m pip install -r /tmp/requirements.txt

ENV PYTHONPYCACHEPREFIX=/tmp

ENTRYPOINT ["/bin/bash", "--login", "-c", "${0#--} \"$@\""]
CMD ["/bin/bash"]
